#summary This is the script in use by my company to do all of our Altium output generation, packaging (zipping), and release-tag.  Everything is done within Subversion (SVN).

== Screen captures: ==

https://altium-designer-addons.googlecode.com/svn/trunk/XIA_Release_Manager/docs/v1.8.10_screen_capture1.jpg

== WHAT THIS SCRIPT WILL DO: ==

  # This release manager script is intended to be an interface to a set of 6 OutJob files that were copied from company templates and somewhat customized for the project in question.  The 6 OutJob files exist to break up the task of output generation into 6 pieces, so that all output files need not be generated each time.  (This was XIA's previous setup, and wasted lots of time.)
  # This script will perform some of the same checks as the Altium builtin release manager:  checking for source files that are saved and checked in.
  # This script does a variety of additional sanity checks on the design, including checking version numbers between schematic and layout, checking for certain design elements required by company design rules, checking for existing releases of the current version number, etc.  It will also check that all output files that had been previously generated were, in fact, also generated this time around.
  # In the future, this script will likely also check that the schematic is in sync with the company components database, so that all schematic parameters (supplier part numbers, RoHS status, soldering info, etc.) are updated prior to generating a BOM.
  # Roughly speaking, this script is setup such that the user is allowed to run OutJobs 1; 1,2; 1,2,3; 1,2,3,4; 1,2,3,4,5; or 1,2,3,4,5,6.  In other words, running later OutJobs require the earlier ones.  So you can stop at a certain point, but you are not allowed to just run the later ones.  This limitation is by design, to make sure that the earlier OutJobs (which generate various outputs for design reviews, etc.) must be run prior to the later ones (which actually generate fab & assembly outputs).
  # This script will perform certain additional operations on certain output files, after Altium generates them.
  a. This script will sort a multi-wire netlist, so that a designer may use this sorted, human-readable, netlist to track connectivity changes as the design progresses.

  b. This script will (if necessary) fix Altium-generated IPC356 netlists in order to address an Altium bug that we've been hitting.

  c. This script will perform some additional handling in order to get an svn rev number inserted into Excel BOMs.

  d. This script will "mark" Excel BOMs when we're doing an assembly packaging operation.  This currently takes the form of replacing a special string within the xls file with a new string of the exact same length.  This operation is done with sed, outside of Excel.

  # This script will checkin all generated output files (including additional ones like sorted multiwire netlist and fixed IPC356 netlist) to svn, in trunk/.
  # If requested, this script will package (zip up) fabrication and/or assembly files and checkin those zipfiles to trunk/.
  a. If additional files (eg. additional documentation, etc.) in the fabrication and/or assembly include directories, these additional files will be added to the relevant zipfile(s).
  # If requested, this script will create new subdirs in releases/ and tags/, corresponding to the version and svn rev number of the current release(s).  It will then copy the zipfile(s) to the new subdir(s) in releases/.  Finally, it will make a project snapshot in the new subdir(s) in tags/.

==WHAT THIS SCRIPT WILL *NOT* DO:==
  # Generate and then gather up all the generated output files and then throw them over the wall into some other, unrelated document management system, as the Altium 10 builtin release manager does with their strange "Vault" concept.  We have a company svn server.  Everyone here has access to it.  Everyone knows how to use it.  Everyone has already been using it for Altium projects.  Why on earth would we want to throw releases over the wall into some unrelated document management system??  We want to use releases/ and tags/ in svn!!
  # Generate release output in some other sandbox directory, other than the project's usual ProjectOutputs/ directory.

==Function list:==
===Manage string lists to configure this script for your company's needs===
{{{
{***************************************************************************
 * function PopulateStringLists()
 *  Perform init step by populating several string lists.
 *  
 *  What we're doing here is telling the script some detailed information
 *  about each of our 6 OutJob files, as well as flagging some additional
 *  steps that need to be performed after running certain OutJob files.
 *
 *  Note:  Unusually for this script, this function will create all
 *  the var string lists.  They will need to be Free()'ed later.
 *
 *  Returns created and populated string lists in all of these var parms.
 *  Returns:  0 on success, 1 if not successful.
 ***************************************************************************}
function PopulateStringLists(var projOutSubDirs				: TStringList;
                             var projOutIncludes			: TStringList;
                             var outJobFiles				: TStringList;
                             var outJobPdfContainers		: TStringList;
                             var outJobPdfEnableNets		: TStringList;
                             var outJobGenContainers		: TStringList;
                             var outJobStatusMsg			: TStringList;
                             var outJobDoSortMultiNetlist	: TStringList;
                             var outJobSetSvnKeywordsOnBoms	: TStringList;
                             var outJobDoFixIpc356Netlist	: TStringList;
                             var deleteExcludes				: TStringList;
							 var zipDoCheckForExisting		: TStringList;
                             var zipExcludes				: TStringList;
                             var zipFindAddlFiles			: TStringList;
                             var zipFileNames				: TStringList;
                             var relAndTagSubDir			: TStringList;
                                 )							: Integer;

{***************************************************************************
 * function FreeStringLists()
 *  Perform cleanup step by freeing several string lists.
 *  
 *  Returns freed string lists in all of these var parms.
 *  Returns:  0 on success, 1 if not successful.
 ***************************************************************************}
function FreeStringLists(var projOutSubDirs				: TStringList;
						 var projOutIncludes			: TStringList;
						 var outJobFiles				: TStringList;
						 var outJobPdfContainers		: TStringList;
						 var outJobPdfEnableNets		: TStringList;
						 var outJobGenContainers		: TStringList;
						 var outJobStatusMsg			: TStringList;
						 var outJobDoSortMultiNetlist	: TStringList;
						 var outJobSetSvnKeywordsOnBoms	: TStringList;
						 var outJobDoFixIpc356Netlist	: TStringList;
						 var deleteExcludes				: TStringList;
						 var zipDoCheckForExisting		: TStringList;
						 var zipExcludes				: TStringList;
						 var zipFindAddlFiles			: TStringList;
						 var zipFileNames				: TStringList;
						 var relAndTagSubDir			: TStringList;
							 )							: Integer;
}}}